include ../../blog-mixins

+page('code: 2021-01-31: Metadata, Markup, Sigils and Tags, oh my!')
  main
    header
      +nav()(index, horizontal)
      h1 Ramblings on Metadata
    section#content
      section
        p
          | All modern content, from text to source code to images to
          | webpages to videos and games, is rich with metadata that
          | enhances it. Often, metadata lives right on top of content,
          | invisible to anyone but she who clicks "view source". For
          | example:
          li.
            semantic or presentational metadata - broadly, "markup" (HTML)
          li.
            presentational metadata - color palettes, stylesheets (CSS)
          li.
            file metadata - name, path, extension (.html), modified-time
          li.
            preprocessor or compiler directives - C #include, Rust \#[cfg]
          li.
            configuration - [toml], .. rst, --- # yaml, "json"
          li.
            decorators or annotations - as in @java, @python, @typescript
          li.
            tags and groupings - twitter #hashtags, wordpress taxonomies
        p
          | Even just for organizing webpages there's a jungle of metadata
          | called the "semantic web," designed primarily for search
          | engines and social media:
          li
            a(href="https://rdfa.info/")
              abbr(title="resource description framework in attributes")
                | RDFa
            |
            | (from the W3C)
          li
            a(href="https://json-ld.org/") JSON-LD
            |
            | (Google-endorsed, but W3C)
          li
            a(href="https://developers.facebook.com/docs/sharing/webmasters").
              OpenGraph
            |
            | (Facebook)
          li
            a(href="http://microformats.org/wiki/about") Microformats
            |
            | (an evolution of W3C
            | #[a(href="https://www.w3.org/TR/microdata/") microdata]?)
        p
          | And even narrowing our scope to consider just metadata on this
          | page, the variety is incredible:
          li
            a(href="/styles/main.css")
              abbr(title="cascading style sheets") css
            |
            | for describing appearance (colors, fonts, formatting...)
          li
            | <span title="flavor!"><i>flavor text*</i></span>
            |
            | (see:
            code: i= ' <span title="flavor!">flavor text*</span>'
            | )
          li
            abbr(title="abbreviations") abbrs
            |
            | (see:
            code: i= ' <abbr title="abbreviations">abbr</abbr>'
            | )
          li
            a(href="#") links
            |
            | (see:
            code: i= ' <a href="#">link</a>'
            | )
        p
          | We have not even begun to discuss metadata targeted at:
          li #[a(href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/WAI-ARIA_basics") accessibility] like for the vision-impaired,
          li #[a(href="https://www.w3.org/International/questions/qa-html-language-declarations") languages]  like alphabets vs. ideographs,
          li #[a(href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media") media] like phones vs. TVs,
        p
          | and so much more: security, compression, tracing... and that's
          | still just considering a single webpage.
        p
          | If the focus of content is the _message_ (the image, the
          | video, the text, the gameplay), then metadata is every little
          | knob that adjusts, manipulates, and expands that focus to
          | enhance the experience.
        p
          | This post is an exploration into what we can learn from all
          | this metadata; an exploration into how we can classify and
          | understand metadata, despite its bewildering diversity.
        p
          | At the end, we hope to arrive at a useful framework for
          | analyzing and understanding metadata that better enables us to
          | write it, use it, and understand it.
        p
          | I will note that I'm intentionally considering markup
          | as a form of metadata. I imagine there might be folks who
          | would argue with that; but given we define metadata as
          | "everything in addition to the data" (ie the content), it
          | should seem fair to consider markup part of the broader
          | category: it is not the content, although it serves to enhance
          | the content and alter its presentation. Things can get murky
          | (if we say javascript is metadata, but then we dynamically
          | load the content that we display, as in a SPA, for example)
          | but we'll avoid that large rat's nest and instead focus on the
          | most prevalent use of javascript, which is to make content
          | interactive; in other words, another way of enhancing it.
      section
        h2 What does Metadata Do?
        p
          | Metadata enhances content to influence behavior, whether of a
          | web browser, a file explorer, a compiler, a text editor, a web
          | server, a python `class`, or an algorithm — or even the user,
          | who is in our case the reader.
        p
          | Metadata comes in an endless variety of formats and purposes,
          | ranging from mundane (file names) to arcane ("semantics"). Its
          | scope is broad because it is defined largely by what it is
          | not; that is, everything other than the content it enhances.
          | Anything in addition to the content, but which is not the
          | content — not the text, the images, the source code, et cetera
          | — is metadata.
        p
          | So... that's a lot.
      section
        h2 What's in a Name?
        p
          | Much of the job of metadata is naming things. Obviously, file
          | names; but actually a lot of content-description is really
          | about names. "Name this image in a search result." "Name this
          | article with this title." "Name the date of this document's
          | creation." Even defining a name is naming something if you
          | look at it in reverse: "name this definition."
      section
        h2 How do you Find it?
        p
          | Once things are named, the big remaining job of metadata is
          | relating things together. This is partly done by names
          | already: "Name this a 'pet'" helps establish a grouping of
          | things named 'pet.'
        p
          | But a relationship might not be denominative. It might be
          | statistical, such as: "things named 'pet' are often named
          | 'Fido' as well". It can be logical, such as: "a 'cat' is a
          | 'pet', but a 'pet' may not be a 'cat'". It might be
          | accidental, such as: "'pet' sorts close to 'picture'".
          | Relationships are sometimes meaningful and sometimes not, but
          | their existence changes a name from a simple label into an
          | identity.
        p
          | Relating names together implies meaning.
      section
        h2 What does it Mean?
        p
          | Finally, metadata can self-describe. Saying that 'pet' is a
          | 'category' affects our interpretation of the name: it's a name
          | that groups together alike things into a category.
        p
          | In a sense, 'category' is itself metadata about 'pet': it
          | names the metadata that names the content. A 'category' may
          | then relate to metadata called 'type', which is a name for
          | metadata about the content that names it a 'cat', and so we
          | have some content described as 'pet cat' now, where 'pet' is
          | described as the 'category' and 'cat' is described as the
          | 'type' and the 'category' changes what possible values a
          | 'type' may have and... well, as Kurt Vonnegut says, "and so
          | on."
        p
          | Practically, we can simply look at long strings of names,
          | relations, and self-desribing metadata as one piece of
          | metadata all together. So our example may look like
          | `category=pet`. We can join together the pieces with '&'
          | characters, and now we've derived the syntax of
          |
          a(href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST").
            url-encoded form data:
          |
          | `category=pet&type=cat&so_on=...`.
        p
          | What does all this metadata mean? Well... that depends. While
          | saying "pet" is the "category" and "cat" is the "type" might
          | be more informative than just saying "pet cat," words like
          | "category" and "type" have a lot less intrinsic meaning.
          | Metadata may attempt to self-describe, but it ultimately must
          | be interpreted in order to be understood.
        p
          | In other words: all metadata has an _audience_.
        p
          | Data's ability to self-describe is limited. Metadata's ability
          | to describe that data is still limited. Metadata's ability to
          | describe itself describing that data is limited yet still...
          | And so on. You can't solve the problem by adding more.
        p
          | Just as an image means nothing until viewed with an
          | appropriate program, its metadata means nothing until
          | interpreted by an approriate audience.
      section
        h2 All Together Now
        p
          | Metadata is a name, a relation, or a description of a name or
          | relation, designed to have meaning when interpreted by some
          | specific audience.
        p
          | So for example: JSON-LD allows you to name and relate together
          | documents, images, and other things on the internet, so that
          | Google can interpret them and display better search results.
          | In the case of JSON-LD, there's a shared vocabulary at
          | #[a(href="https://schema.org/docs/schemas.html") schema.org]
          | for establishing what special self-describing metadata (like
          | "@type") is supposed to mean to the machines that read JSON-LD
          | metadata (like Google's bots).
        p
          | To summarize:
        dl.compact.panel
          dt JSON-LD with schema.org
          dd: dl.compact
              dt audience:
              dd Google (and perhaps others)
              dt names:
              dd.
                there's a whole hierarchy, see the
                #[a.traditional(href="https://schema.org/docs/full.html") schema.org docs]
              dt relations:
              dd URLs, usually, to more JSON-LD annotated documents
              dd ... and, of course, the structure of the name hierarchy
              dt self-describing properties:
              dd "@type", among others
        p
          | A similar argument applies to configuration, like yaml, and to
          | programming language directives, like #include in C. There's
          | some kind of schema (or spec) describing how they're supposed
          | to be interpreted, and the intended audience (the parser or
          | the compiler) figures out what to do according to the schema.
      section
        h2 Thank You, Thank You, You've been a Great Audience
        p
          | It's clear by now that metadata always falls into a similar
          | structure. You group together names and relationships with
          | self-describing fields.
        p
          | What's still interesting is the audience. I think most
          | audiences are similar. By that I mean: most audiences are
          | identifiable by the stage in content-processing at which they
          | are interested in metadata. These stages are:
          li before reading content,
          li while reading content,
          li and after reading content, while interpreting it.
        p
          | Let's give a few examples of content, its metadata, and the
          | audiences that read the metadata at varying stages during
          | content processing.
        h3 A Programming Language
        p
          | In a programming language, each of the compiler, parser, and
          | runtime neatly fits exactly one of these cases:
          li compiler metadata is processed before reading content
          li parser metadata is processed while reading content
          li runtime metadata is processed after the content is read.
        p
          | Compiler metadata might affect the compilation target: x86 vs.
          | ARM, for example. Parser metadata is interpreted by the parser
          | - for example, macros: they're expanded by the parser while
          | reading the surrounding code. (Macros are metadata: they
          | aren't the content, they describe the content. Even complex
          | macros that behave like functions still merely describe
          | content, by way of rules for generating it - they are not it.)
          | Finally, runtime metadata is processed after the code is read,
          | and it can alter the behavior of the code while it is
          | executing - for example, annotations or decorators may attach
          | two pieces of code together at runtime that are otherwise
          | unrelated.
        h3 A Search Engine
        p
          | In the example of a search engine parsing "rich result"
          | metadata:
          li the schema is processed before reading content
          li annotations like "@type" are processed while reading content
          li links and relations are processed after reading content.
        p
          | A schema tells the search engine how to read the JSON-LD
          | metadata before the content is read, a "@type" field can
          | affect how the metadata is parsed _while_ it is read, and
          | links can affect at runtime how the search engine crawler
          | decides what pages to index next, what images to display in a
          | result card, et cetera.
        h3 Markup
        p
          | Let's do one more. In the example of HTML:
          li
            = '`<!doctype>` and `<meta>`'
            |
            | are processed before reading content
          li tags and attributes are processed while reading content
          li
            = '`<style>`s '
            | are processed after reading content
        p
          = '`<!doctype>` and `<meta>`'
          |
          | can affect how a document is supposed to be parsed before
          | it is read. Tags and attributes (like
          |
          = '`<a href>` and `<input type>`'
          | ) change or augment content while it is read.
          |
          = '`<style>`s'
          |
          | change the behavior and appearance of content after it has
          | been read.
        p
          | Not to confound things even further, but JSON-LD is intended
          | to be embedded within HTML inside of
          |
          = '`<script>`'
          |
          | tags &mdash; despite JSON-LD not being a script!
        p
          | So HTML itself has metadata, and then embeds more metadata
          | still, which may have its own audiences, and be processed
          | during its own stages... "And so on," as Vonnegut says.
      section
        h2 A Lacking Distinction
        p
          | Notice anything in common among all these examples?
        p
          | Metadata doesn't state its audience, and no metadata
          | distinguishes syntactically between stages: does it "process
          | before," "during," or "after" the content it describes?
        p
          | Consider that
          |
          = '`<meta>` and `<style>` and `<input>`'
          |
          | all look the same. It is up to you to understand that "meta"
          | is processed before the rest of content and may affect how it
          | is read, that "input" can change content inside of it from
          | inline text to a special form element while it is read, and
          | that "style" tags are going to change how content is rendered
          | at runtime _after_ it is read.
        p
          | Consider JSON-LD: it uses a prefix, "@", to denote special
          | property keys like "@type". While this indicates that "@type"
          | is not part of the document, it doesn't tell you when "@type"
          | has meaning or to what audience.
      section
        h2 Pick your Audience, Pick your Stage
        p
          | What if metadata _did_ name its audience, and clearly
          | indicated the stage of content-processing to which it applied?
        p
          | HTML was designed to embed other documents, so it tends to
          | come closest to accomplishing this goal. At the very least,
          | for instance, JSON-LD
          |
          = '`<script>`'
          |
          | tags have a special JSON-LD `"type"` attribute. Yet this is
          | actually _more_ metadata, metadata of the
          |
          = '`<script>`'
          |
          | tag, and not at all a declaration of the audience. It also
          | doesn't indicate at what stage of content-processing the
          | metadata has meaning.
        p
          | HTML is complicated because it is intended for many audiences:
          | it's intended for human consumption and authorship, it's
          | intended to be processed by machines like Google's search
          | indexer, and it's intended to embed media like images and
          | video, not to mention entire other documents like JSON-LD,
          | JavaScript, CSS, and... well, and so on. Every type of
          | embedded content may have its own metadata intended for its
          | own audiences.
        p
          | So... what if metadata named its audience and its stage?
        h3 Tools would be easier to write.
        p
          | Point point point.
        h3 Annotated content would be easier for humans to read.
        p
          | Points points points. Making them.
        h3 More metadata would add less complexity.
        p
          | Points about moarness. Very pointy.
        h3 Metadata can be kept from unintended audiences.
        p
          | Wow, security maybe? Oh no but definitely smaller files. WowW.
        h3 Audience opt-in could make content more dynamic.
        p
          | On the internet nobody knows you're a dog... until now.
        h3 Complex programs would be easier to reason about.
        p
          | Does this run at compile-time or... elsewise-time?
      section.panel
        h2 Parting Words
        p
          | In conclusion, Pudgy for President 2024.
